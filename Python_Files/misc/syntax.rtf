{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16860\viewh12680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs72 \cf0 [ ]
\fs28 \
\
1. List and tuple indexing: Square brackets are used to access individual elements in a list or tuple. The index value is specified within the square brackets. For example, `my_list[2]` would access the third element of the list `my_list`.\
\
2. List and tuple slicing: Square brackets are used to extract a sublist or subtuple from a larger list or tuple. The start and end indices for the desired sublist are specified within the square brackets. For example, `my_list[1:4]` would extract a sublist from index 1 up to, but not including, index 4 from the list `my_list`.\
\
3. List and tuple comprehension: Square brackets are used to define list comprehensions or tuple comprehensions, which are concise ways to create new lists or tuples based on existing sequences. For example, `[x**2 for x in range(5)]` would create a list containing the squares of numbers from 0 to 4.\
\
4. Accessing characters in a string: Since strings are essentially sequences of characters, square brackets can be used to access individual characters within a string. For example, `my_string[3]` would access the fourth character of the string `my_string`.\
\
5. Boolean indexing and slicing: Square brackets can also be used for boolean indexing and slicing operations, where specific elements or a subset of elements are selected based on certain conditions. For example, `my_list[my_list > 5]` would return a new list containing all elements greater than 5 from `my_list`.\
\

\fs72 \{ \}
\fs28 \
In Python, curly brackets (\{\}) are used to define and represent several data structures and objects. Here are three main uses of curly brackets in Python:\
\
1. Sets: Curly brackets are used to define a set, which is an unordered collection of unique elements. For example:\
```\
my_set = \{1, 2, 3, 4\}\
```\
\
2. Dictionary: Curly brackets are used to define a dictionary, which is an unordered collection of key-value pairs. Each key-value pair is separated by a colon (:), and the key-value pairs are separated by commas. For example:\
```\
my_dict = \{'name': 'John', 'age': 25, 'city': 'New York'\}\
```\
\
3. Format strings: Curly brackets are used to define placeholders in format strings. Format strings allow you to concatenate variables or expressions within a string. For example:\
```\
name = "John"\
age = 25\
print("My name is \{\} and I am \{\} years old".format(name, age))\
```\
In this example, the curly brackets \{\} act as placeholders for variables `name` and `age`, which will be replaced by their respective values during string formatting.\
\

\fs72 ( )
\fs28 \
\
Parentheses are used for several purposes in Python:\
\
1. Function Calls: Parentheses are used to call a function in Python. Inside the parentheses, you can pass arguments to the function if required.\
\
Example: `print("Hello, World!")`\
\
2. Mathematical Expressions: Parentheses are used to define the order of operations in mathematical expressions. They help to group sub-expressions together.\
\
Example: `result = (2 + 3) * 4`\
\
3. Tuples: Parentheses are used to create tuples in Python. A tuple is an ordered, immutable collection of elements enclosed in parentheses.\
\
Example: `my_tuple = (1, 2, 3)`\
\
4. List Comprehensions: Parentheses can be used to enclose a list comprehension expression for creating a list from an existing list or iterable.\
\
Example: `new_list = [x for x in my_list if x % 2 == 0]`\
\
\
Note: Parentheses can also be used for other purposes like defining function parameters, grouping conditions in control statements, etc.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ADD TO A LIST\
\
ADD TO A  TUPLE\
\
ADD TO A  SET\
Myset = \{1, 4, 7 ,8\}}